// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  teams         Team[] 
  currentTeam   Team?     @relation("CurrentTeamUsers", fields: [currentTeamId], references: [id])
  currentTeamId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  invitationsSent Invite[] @relation("sentBy") 
}

enum Decision {
  REJECT
  ACCEPT
  ITERATE
  NONE
}

enum Status {
  DRAFT
  INACTIVE
  ACTIVE
}

model Project {
  id          String   @id @default(cuid())
  name        String
  slug        String?   @unique 
  hypothesis String?
  startDate   DateTime?
  endDate     DateTime?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      Status? @default(DRAFT)
  decision    Decision? @default(NONE)
  imageUrl    String?
  improvement Decimal?
  statSig     Decimal?
  variants    Json?
}

model Team {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  image       String?
  users       User[]
  projects    Project[]
  currentUsers User[] @relation("CurrentTeamUsers")
  apiKeys     ApiKey[]
  invites     Invite[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
}

model Invite {
  id        String   @id @default(cuid())
  sentBy  User  @relation("sentBy", fields: [senderId], references: [id])
  senderId  String
  sentToEmail  String 
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accepted  Boolean @default(false)
}


